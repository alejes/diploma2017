class KotlinRunner {
    companion object {
        @JvmStatic
        fun matrixSquare(source: dynamic): dynamic {
            val destination: MutableList<MutableList<Int>> = mutableListOf<MutableList<Int>>();
            for (i in 0..source.size-1) {
                destination.add(mutableListOf<Int>())
                for (j in 0..source.size-1) {
                    destination[i].add(j, 0)
                }
            }


            for (i in 0..source.size-1) {
                for (j in 0..source.size-1) {
                    for (k in 0..source.size-1) {
                        val temp = source[i][k] + source[k][j];
                        destination[i][j] = destination[i][j] + temp;
                    }
                }
            }

            return destination;
        }

        @JvmStatic
        fun matrixSquareProxy(source: List<List<Int>>): List<List<Int>> {
            //return MutableList<List<Int>>(5, { _ -> MutableList(5, { _ -> 5 }) });
            return matrixSquare(source)
        }
    }
}

fun main(args: Array<String>) {
    val z = List<List<Int>>(5, {_->List(5, {_-> 53})})
    val y = KotlinRunner.matrixSquareProxy(z)
    for (i in 0..y  .size-1){
        for (j in 0..y[i].size-1){
            print(y[i][j])
        }
        println();
    }
}





------------
failed:

class KotlinRunner {
    companion object {
        @JvmStatic
        fun matrixSquare(source: dynamic): dynamic {
            val destination: MutableList<MutableList<Int>> = mutableListOf<MutableList<Int>>();
            for (i in 0..source.size-1) {
                destination.add(mutableListOf<Int>())
                for (j in 0..source.size-1) {
                    destination[i].add(j, 0)
                }
            }


            for (i in 0..source.size-1) {
                for (j in 0..source.size-1) {
                    for (k in 0..source.size-1) {
                        destination[i][j] += source[i][k] * source[k][j];
                    }
                }
            }

            return destination;
        }

        @JvmStatic
        fun matrixSquareProxy(source: List<List<Int>>): List<List<Int>> {
            //return MutableList<List<Int>>(5, { _ -> MutableList(5, { _ -> 5 }) });
            return matrixSquare(source)
        }
    }
}

fun main(args: Array<String>) {
    val z = List<List<Int>>(5, {_->List(5, {_-> 53})})
    val y = KotlinRunner.matrixSquareProxy(z)
    for (i in 0..y  .size-1){
        for (j in 0..y[i].size-1){
            print(y[i][j])
        }
        println();
    }
}

